// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id      Int      @id @default(autoincrement())
  old_id  Int?
  name    String?
  books Book[]
}

model Book {
  id                  Int      @id @default(autoincrement())
  old_id              Int?
  name                String?
  header              String?
  authors_text        String?
  body                String?
  annotation          String?
  year                Int?
  second_name         String?
  publisher           String?
  page_count          Int?
  publish_city        String?
  translate           String?
  devide              Int?
  registration_number Int?
  volume              Int?
  exemplar            Int?
  language            String?
  authors Author[]
  issuances Issuance[]
}

model Reader {
  id         Int         @id @default(autoincrement())
  old_id     Int?
  name       String?
  address    String?
  birth_date String?
  work_place String?
  phone1     String?
  phone2     String?
  issuances Issuance[]
}

model Issuance {
  id          Int      @id @default(autoincrement())
  begin_date  String
  end_date    String?
  reader      Reader   @relation(fields: [readerId], references: [id])
  readerId    Int
  closed      Boolean  @default(false)
  book        Book @relation(fields: [bookId], references: [id])
  bookId      Int

}

model Role {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  users   User[]
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  password   String
  roles      Role[]
  tokens     RefreshToken[]
}

model RefreshToken {
  id       Int      @id @default(autoincrement())
  token    String
  user   User @relation(fields: [userId], references: [id])
  userId Int
}